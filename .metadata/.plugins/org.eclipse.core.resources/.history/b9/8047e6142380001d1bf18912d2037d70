package market.controller;

import java.io.*;
import java.sql.*;
import java.util.List;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import market.dao.BoardDAO;
import market.vo.BoardVO;

@WebServlet("*.do")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private HttpSession session;
	private BoardDAO bdao;
	private String url;
	
	String num;
	
	String page;
	
	public void init(ServletConfig config) throws ServletException {
		// ServletContext의 con 속성에서 Connection 객체를 받아와서
		Connection con = (Connection)config.getServletContext().getAttribute("con");

		bdao = new BoardDAO(con);// bdao 객체 생성
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String cmd = request.getRequestURI().substring(request.getContextPath().length());
		session = request.getSession();

		System.out.println("cmd : " + cmd);

		if (cmd.equals("/BoardList.do")) { // cmd가 /BoardList.do 게시판 목록 조회
			page = request.getParameter("page");
			System.out.println(page);
			list(request);
			url = "/board/boardList.jsp";
			RequestDispatcher rd = request.getRequestDispatcher(url);
			rd.forward(request, response); // 저장된 url로 포워딩
		} else if (cmd.equals("/BoardWriteForm.do")) {// /BoardWriteForm.do 게시물 작성 폼으로 이동
			url = "/board/boardWrite.jsp";
			RequestDispatcher rd = request.getRequestDispatcher(url);
			rd.forward(request, response); // 저장된 url로 포워딩
		} else if (cmd.equals("/BoardWrite.do")) {// /BoardWrite.do 게시물 작성 처리 후 저장된 url로 리다이렉트
			write(request);
			url = "/market/BoardList.do";
			response.sendRedirect(url);

		} else if (cmd.equals("/BoardModify.do")) {// /BoardModify.do 게시물 수정 처리 후 저장된 url로 리다이렉트
			num = request.getParameter("num");
			modify(request);
			url = "/market/BoardList.do";
			response.sendRedirect(url);

		} else if (cmd.equals("/BoardRemove.do")) {// /BoardRemove.do 게시물 삭제 처리 후 저장된 url로 리다이렉트
			num = request.getParameter("num");
			remove(request);
			url = "/market/BoardList.do";
			response.sendRedirect(url);

		} else {// /BoardView.do 게시물 조회 처리
			num = request.getParameter("num");
			view(request);
			url = "/board/boardView.jsp";
			RequestDispatcher rd = request.getRequestDispatcher(url);
			rd.forward(request, response); // 저장된 url로 포워딩
		}

		
	}

	public void remove(HttpServletRequest req) { // 게시물 삭제
		// 파라미터로 전달된 게시물 번호를 받아서
		int num = Integer.parseInt(req.getParameter("num"));
		// 게시물 삭제 처리를 한 후 삭제에 성공하면
		boolean result = bdao.deleteBoard(num);
		// 세션의 msg 속성에 '게시물이 삭제되었습니다.'를 저장하고
		if (result == true) {
			session.setAttribute("msg", "게시물이 삭제되었습니다.");
		} else {
			session.setAttribute("msg", "게시물 삭제에 실패하였습니다.");
			// 실패하면 '게시물 삭제에 실패하였습니다.'를 저장한 후
			// 이동 url을 게시판 목록 페이지로 지정
			
		}

	}

	public void modify(HttpServletRequest req) { // 게시물 수정
		// 파라미터로 전달된 게시물 번호, 제목, 내용을 받아서 BoardVO에 저장
		BoardVO bvo = new BoardVO();
		
		bvo.setNum(Integer.parseInt(req.getParameter("num")));
		bvo.setSubject(req.getParameter("subject"));
		bvo.setContent(req.getParameter("content"));
		
		boolean result = bdao.updateBoard(bvo);
		// 게시물 수정 처리를 한 후 수정에 성공하면
		if (result == true) {
			session.setAttribute("msg", "게시물이 수정되었습니다.");// 세션의 msg 속성에 '게시물이 수정되었습니다.'를 저장하고
		} else {
			session.setAttribute("msg", "게시물 수정에 실패하였습니다.");// 실패하면 '게시물 수정에 실패하였습니다.'를 저장한 후
			
		}
		// 이동 url을 게시판 목록 페이지로 지정
	}

	public void view(HttpServletRequest req) { // 게시물 조회
		// 해당 게시물을 요청 객체의 bvo 속성에 저장한 후
		req.setAttribute("bvo", bdao.selectBoard(Integer.parseInt(num)));
		// 이동 url을 게시판 조회 페이지로 지정
		BoardVO bvo = bdao.selectBoard(Integer.parseInt(num));
		
		String sid = (String) session.getAttribute("sid");
		
		if(sid == null || !sid.equals(bvo.getUserid()) ) {
		bdao.updateHit(Integer.parseInt(num));
		
		// 파라미터로 전달된 게시물 번호를 받아서
		
		// 자기가 작성한 글이 아닌 경우에만 조회 수 1 증가
		
	}

	}

	public void list(HttpServletRequest req) {	//게시판 목록 조회
		//게시판 목록을 요청 객체의 boardList 속성에 저장
		
//		List<BoardVO> boardList = bdao.selectBoardAll();
//		req.setAttribute("bvoList", bdao.selectBoardAll());
		
		req.setAttribute("bvoList", bdao.selectPage(Integer.parseInt(page)));
		
		
		//전체 게시물 수를 요청 객체의 total 속성에 저장
//		int total = bdao.totalCount();
		req.setAttribute("total", bdao.totalCount());
		//이동 url을 게시판 목록 페이지로 지정
	}

	public void write(HttpServletRequest req) { // 게시판 작성
		// 요청 파라미터로 전달된 게시물 제목, 내용, 작성자, ip(getRemoteAddr())를
		// BOardVO에 저장
		BoardVO bvo = new BoardVO();
		
		bvo.setSubject(req.getParameter("subject"));
		bvo.setContent(req.getParameter("content"));
		bvo.setUserid(req.getParameter("userid"));
		bvo.setIP(req.getRemoteAddr());
		
		// 게시물 등록 처리를 한 후 등록에 성공하면
		boolean result =  bdao.insertBoard(bvo);
		
		if (result == true) {
			session.setAttribute("msg", "게시물이 등록되었습니다.");// 세션의 msg 속성에 '게시물이 등록되었습니다.'를 저장하고
		} else {
			session.setAttribute("msg", "게시물 등록에 실패하였습니다.");// 실패하면 '게시물 등록에 실패하였습니다.'를 저장한 후
			
		}
		// 이동 url을 게시판 목록 페이지로 지정
	}

}
